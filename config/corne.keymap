#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

&led_strip {
    chain-length = <24>;
};

#define DEFAULT    0
#define NUM        1
#define SYM        2
#define NAV        3
#define MED        4
#define FUNC       5

&caps_word {
  continue-list = <UNDERSCORE MINUS>;
};


/ {
  combos {
    compatible = "zmk,combos";
    // combo_shift_left {
    //   timeout-ms = <50>;
    //   key-positions = <15 16>;
    //   bindings = <&kp LSHIFT>;
    //   layers = <DEFAULT>;
    // };
    // combo_shift_right {
    //   timeout-ms = <50>;
    //   key-positions = <19 20>;
    //   bindings = <&kp RSHIFT>;
    //   layers = <DEFAULT>;
    // };
    // combo_sym_left {
    //   timeout-ms = <50>;
    //   key-positions = <27 28>;
    //   bindings = <&mo SYM>;
    // };
    // combo_sym_right {
    //   timeout-ms = <50>;
    //   key-positions = <31 32>;
    //   bindings = <&mo SYM>;
    // };
    // combo_num_left {
    //   timeout-ms = <75>;
    //   key-positions = <14 15>;
    //   bindings = <&mo NUM>;
    //   layers = <DEFAULT>;
    // };
    // combo_num_right {
    //   timeout-ms = <75>;
    //   key-positions = <20 21>;
    //   bindings = <&mo NUM>;
    //   layers = <DEFAULT>;
    // };
    // combo_nav {
    //   timeout-ms = <50>;
    //   key-positions = <13 14>;
    //   bindings = <&mo NAV>;
    //   layers = <DEFAULT>;
    // };
    // combo_media {
    //   timeout-ms = <50>;
    //   key-positions = <21 22>;
    //   bindings = <&mo MEDIA>;
    //   layers = <DEFAULT>;
    // };
    // combo_ctrl_left {
    //   timeout-ms = <50>;
    //   key-positions = <16 36>;
    //   bindings = <&kp LCTRL>;
    // };
    // combo_ctrl_right {
    //   timeout-ms = <50>;
    //   key-positions = <19 41>;
    //   bindings = <&kp RCTRL>;
    // };
    // combo_alt_left {
    //   timeout-ms = <50>;
    //   key-positions = <16 37>;
    //   bindings = <&kp LALT>;
    // };
    // combo_alt_right {
    //   timeout-ms = <50>;
    //   key-positions = <19 40>;
    //   bindings = <&kp RALT>;
    // };
    // combo_cmd_left {
    //   timeout-ms = <50>;
    //   key-positions = <16 38>;
    //   bindings = <&kp LCMD>;
    // };
    // combo_cmd_right {
    //   timeout-ms = <50>;
    //   key-positions = <19 39>;
    //   bindings = <&kp RCMD>;
    // };
    // combo_del {
    //   timeout-ms = <100>;
    //   key-positions = <19 20 39>;
    //   bindings = <&kp DEL>;
    //   layers = <DEFAULT>;
    // };
  };
  behaviors {
    hm: homerow_mods {
      compatible = "zmk,behavior-hold-tap"; // https://zmk.dev/docs/keymaps/behaviors/hold-tap
      label = "HOMEROW_MODS";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      quick_tap_ms = <200>;    // if double tapped, long-tabs the key instead of hold
      flavor = "balanced";
      bindings = <&kp>, <&kp>;
    };
    hml: home_row_mod_left {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "balanced";
        require-prior-idle-ms = <50>;
        tapping-term-ms = <200>;
        quick-tap-ms = <175>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 39 40 41>; // List of keys on the right side of the keyboard
        hold-trigger-on-release;
    };
    hmlm: home_row_mod_left_mo {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "balanced";
        require-prior-idle-ms = <50>;
        tapping-term-ms = <200>;
        quick-tap-ms = <175>;
        bindings = <&mo>, <&kp>;
        hold-trigger-key-positions = <6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 39 40 41>; // List of keys on the right side of the keyboard
        hold-trigger-on-release;
    };
    hmr: home_row_mod_right {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "balanced";
        require-prior-idle-ms = <150>;
        tapping-term-ms = <280>;
        quick-tap-ms = <175>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 25 26 27 28 29 36 37 38>; // List of keys on the left side of the keyboard
        hold-trigger-on-release;
    };
    hmrm: home_row_mod_right_mo {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "balanced";
        require-prior-idle-ms = <150>;
        tapping-term-ms = <280>;
        quick-tap-ms = <175>;
        bindings = <&mo>, <&kp>;
        hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 25 26 27 28 29 36 37 38>; // List of keys on the left side of the keyboard
        hold-trigger-on-release;
    };
    grave_esc: grave_escape {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&hm LCTRL ESC>, <&kp GRAVE>;
      mods = <(MOD_LGUI|MOD_RGUI)>;
      keep-mods = <(MOD_LGUI|MOD_RGUI)>;
    };
    bspdel: backspace_delete {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp BSPC>, <&kp DEL>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
  };
  keymap {
    compatible = "zmk,keymap";
    default_layer {
        label = "Default";
        display-name = "def";
        bindings = <
            &none &kp Q     &kp W         &kp E           &kp R           &kp T            &kp Y    &kp U           &kp I         &kp O         &kp P              &none
            &none &kp A     &hmlm NAV S   &hmlm SYM D     &hml LSHIFT F   &kp G            &kp H    &hmr RSHIFT J   &hmrm NUM K   &hmrm MED L   &kp SEMICOLON      &none
            &none &kp Z     &kp X         &kp C           &kp V           &kp B            &kp N    &kp M           &kp COMMA     &kp DOT       &kp SLASH          &none
                                          &hm LCTRL ESC   &kp LCMD        &kp SPACE        &bspdel  &kp ENTER       &kp RCTRL
        >;
    };
    num_layer {
        label = "Numbers";
        display-name = "num";
        bindings = <
            &none &kp N1    &kp N2      &kp N3      &kp N4      &kp N5          &trans      &trans      &trans    &trans    &trans    &none
            &none &kp N6    &kp N7      &kp N8      &kp N9      &kp N0          &trans      &trans      &trans    &trans    &trans    &none
            &none &kp BSLH  &kp DOLLAR  &kp CARET   &kp GRAVE   &kp PERCENT     &trans      &trans      &trans    &trans    &trans    &none
                                        &kp TILDE   &kp LCMD    &kp LSHIFT      &kp RSHIFT  &trans      &trans

                                        
        >;
    }; 
    sym_layer {
        label = "Symbols";
        display-name = "sym";
        bindings = <
            &none &trans    &trans  &trans      &trans      &trans                &kp HASH        &kp AT          &kp EXCL      &kp LPAR      &kp RPAR      &none
            &none &trans    &trans  &trans      &trans      &trans                &kp AMPERSAND   &kp UNDERSCORE  &kp ASTERISK  &kp LBKT      &kp RBKT      &none
            &none &trans    &trans  &trans      &trans      &trans                &kp PIPE        &kp DQT         &kp SQT       &kp LBRC      &kp RBRC      &none
                                    &trans      &trans      &trans                &kp EQUAL       &kp MINUS       &kp PLUS    
        >;
    };
    nav_layer {
        label = "Nav";
        display-name = "nav";
        bindings = <
            &none &trans    &trans     &trans       &kp TAB     &trans             &trans         &trans      &kp UP     &trans     &trans        &none
            &none &trans    &trans     &kp LALT     &kp LCMD    &trans             &kp LG(LBKT)   &kp LEFT    &kp DOWN   &kp RIGHT  &kp LG(RBKT)  &none
            &none &trans     &trans    &trans       &kp TILDE   &trans             &trans         &trans      &trans     &trans     &trans        &none
                                       &trans       &kp LCMD    &kp LSHIFT         &kp RSHIFT     &trans      &trans
        >;
    };
    // nav2_layer {
    //     label = "Nav2";
    //     display-name = "nav2";
    //     bindings = <
    //         &none &trans  &trans    &trans  &trans                 &trans                 &trans                &kp HOME           &kp PG_UP           &kp END            &trans   &none
    //         &none &trans  &trans    &trans  &trans                 &trans                 &kp LG(LBKT)          &kp LA(LEFT)       &kp PG_DN           &kp LA(RIGHT)      &kp LG(RBKT)   &none
    //         &none &trans  &trans    &trans  &trans                 &trans                 &trans                &kp LC(LG(LA(U)))  &trans              &kp LC(LG(LA(I)))  &trans   &none
    //                                             &trans  &hm LALT LS(LC(TAB))  &hm LCMD LC(TAB)     &hm RCMD LS(LC(TAB))  &hm RALT LC(TAB)   &hm RCTRL LG(GRAVE)
    //     >;
    // };
    media_layer {
        label = "Media";
        display-name = "med";
        bindings = <
            &none &trans  &kp C_VOL_DN  &kp C_MUTE        &kp C_VOL_UP      &trans              &rgb_ug RGB_BRI   &trans            &trans        &trans &trans &none
            &none &trans  &kp C_PREV    &kp C_PLAY_PAUSE  &kp C_NEXT        &trans              &rgb_ug RGB_BRD   &rgb_ug RGB_TOG   &trans        &trans &trans &none
            &none &trans  &trans        &kp C_BRI_DN      &kp C_BRI_UP      &trans              &rgb_ug RGB_EFF   &trans            &trans        &trans &trans &none
                                        &trans            &trans            &trans              &kp C_VOL_DN      &kp C_MUTE        &kp C_VOL_UP
        >;
    };
    func_layer {
        label = "Func";
        display-name = "fn";
        bindings = <
            &none &kp F1   &kp F2   &kp F3  &kp F4  &kp F5     &kp F6   &kp F7   &kp F8  &kp F9  &kp F10  &none
            &none &kp F11  &kp F12  &kp F13 &kp F14 &kp F15    &kp F16  &kp F17  &kp F18 &kp F19 &kp F20  &none
            &none &kp F21  &kp F22  &kp F23 &kp F24 &trans     &trans   &trans   &trans  &trans  &trans   &none
                                                &trans  &trans  &trans     &trans  &trans  &trans
            >;
    };
  };
};
